#################################################################################
#################################################################################
############################## Terraform with Nana ##############################
#################################################################################
#################################################################################

Terraform is a infrastructure provisioning tool. It is allow you automate and manage your infrastructure, your playform, and services that run on that platform. Terraform use declarative way.

Difference of IaC tools - How they work
  1) Declarative vs Procedural(Imperative):
    * Procedural(Imperative): You explain step by step how deploy thing
    * Declarative: You explain final result and tools select steps by himself
  2) Mutable vs Immutable:
    * Mutable: Every new changes applied on already deployed infrastructure
    * Immutable: Every new changes delete (replacing) old deploy and create a new one
  3) Agent vs Agentless 

Terraform Architecture

Input components       Main components

        main.tf       Providers
                \    /
                 CORE
                /    
          State        

Terraform commands for different stages 
>>terraform init      # Initialize the folder as a project for terraform. Without "terraform init" you can't start use terraform
>>terraform refresh   # Query infrstructure provider to get current state 
>>terraform plan      # Create an execution plan. The command can show you what attributes (options) exist of specific resources
>>terraform apply     # Execute the plan 
              Flag -auto-approve
>>terraform destroy   # Destroy the resources/infrastructure 
        Option --target <targetResource>        # Try do not use it. Because it delete in current state but not in configuration file. In future if you will use a file resource will comeback

Terraform functions:
  provider "<provider>" {}
  resource "<specificKey>" "<name>" {
    tags = {}   # Tag is the custom block that can contains any key = "value". Example stage = "development"
  }
  data "<specificKey>" "<name>" {}
  output "<name>" {                   # The function is used for get value of attribute's key
    value = "<key>"
  }
  variable "<name>" {                 # Input variable. INPUT, INPUT and again INPUT
    <key> = "<value>"                 # What ask in prompt
  }

PROVIDERS IN TERRAFORM

It is not required to provide "providers" information (it only works with providers that supported by HashiCorp not custom providers). But if you have a few providers then it is a good practice for create a new additional providers.tf file and put all providers here



TERRAFORM STATE

>>terraform state list                  # Show all states of infrastructure
>>terraform state show <selectedState>  # Useful for get info of specific state



OUTPUT VALUES

After terraform apply completed the output block will show output valuest of attribute:
  output "name" {
    value = docker_container.nginx.<attribute>
    value = docker_container.nginx.<attribute2>
  }




INPUT VARIABLES - PARAMETERIZE YOUR TERRAFORM CONFIGURATION TO MAKE IT RE-USABLE

Declare variable:
  variable "<varName>" {
    description = <"description">
    default = <"value">             # [Optional] Default value will applied if no value of variable will not fint
    type = <string|number|bool|...> # [Optional] You can define what type of value should be applied. You can also use list(string), look about additional information in documentation. Also you can require list of objects with type requirements of objects.
  }

  resource "docker_image" "nginx" {
    name         = var.<varName>    # If you use "var.<varName>[0] that is mean from list(string) get first value
    keep_locally = false
  }

3 way to pass value to variable:
 1) If you don't provide value to variable it will prompt value of variable from you after you use "terraform apply" command
 2) >>terraform apply -var "<varName>=<value>"
 3) Define in splited file "terraform.tfvars". Example of file's body:
      <varName> = <value>

>>terraform apply -var-file /<dst>.tfvars     # Path to custom variable file that is not terraform.tfvars



ENVIRONMENT VARIABLES IN TERRAFORM

NOTE: You can use Linux ENVIRONMENT variables as terraform variables. Find documentation for every provider.

For use custom ENVIRONMENT variables as terraform variables you should use profeix "TF_VAR_...". Example:
  >>export TF_VAR_<key>_<name>="<value>"



CREATE SECURITY GROUP FOR FIREWALL CONFIGURATION

ingress - is mean incoming traffic rule
engress - is mean outgoing traffic rule



TERRAFORM TREE FILES STRUCTURE   #CUSTOM CHAPTER

main.tf                       # Main file what can content all information in once
providers.tf                  # [Optional] File for split information from "main.tf". Contains information about required providers that used in terraform project.
  1) required_providers:
        Purpose                    - Declare dependencies + version constraints
        Where it's defined         - Inside terraform {} block
        Required?                  - Optional but recommended
        Good for teams/versioning? - Absolutely
  2) provider block:
        Purpose                    - Configure how to connect to the provider
        Where it's defined         - In top-level Terraform config
        Required?                  - Yes, for actual usage
        Good for teams/versioning? - Not enough on its own
variable.tf                   # [Optional] File for split information from "main.tf". Used for declare variables and set requirements about variables that will used in terraform project. 
  1) string
  2) number
  3) bool
  4) list(type)
  5) map(type)
  6) object({
      <key> = type
      <key> = type
     })
  7) any
terraform.tfvars              # [Optional] File for split information from "main.tf"/"variable.tf". Contains <key> = <value> pairs line by line for set values to variables.
terraform.tfstate             # [Automatically] Information about state of terraform project for current time.
terraform.tfstate.backup      # [Automatically] Backup of previous state of terraform project.


Files structure examples:

main.tf:
  resource "<object>" "<propertyOpject>" {  # Input infrastructure information that will used for deploy/change it.
    <property> = <value>
    <property> = <value>

    <propertyObject> {
      <property> = <value>
      <property> = <value>
    }
  }

  data "<ojbect>" "<propertyObject>" {      # Fetch data from existing infrastructure
    <varName> = <whatFetch>
    <varName> = <whatFetch>

    filter {                                # [Optional]
      name = "<value>"                      # The name of the field you want to filter by (like "name" or "tag:Environment")
      values = ["ubuntu-*"]                 # A list of acceptable values for that field. You can use wildcards like * for pattern matching.
    }
  }

providers.tf:
  terraform {
    required_providers {
      aws = {
        source  = "hashicorp/aws"
        version = "~> 5.0"
      }
      google = {
        source  = "hashicorp/google"
        version = "~> 5.0"
      }
      vsphere = {
        source  = "hashicorp/vsphere"
        version = "2.11.1"
      }
    }

    required_version = ">= 1.3.0"
  }

  provider "aws" {
    alias  = "us_east"
    region = "us-east-1"
    access_key = var.aws_access_key
    secret_key = var.aws_secret_key
  }

  provider "aws" {
    alias  = "eu_west"
    region = "eu-west-1"
    access_key = var.aws_access_key
    secret_key = var.aws_secret_key
  }

  provider "vsphere" {
    user           = var.vsphere_user
    password       = var.vsphere_password
    vsphere_server = var.vsphere_server
    allow_unverified_ssl = true
  }

variable.tf:
  variable "project_name" {
    description = "String"
    type        = string
    default     = "Value"
  }

  variable "environment" {
    description = "Integer"
    type        = number
    default     = 4
  }

terraform.tfvars:
  <key> = <value>
  <key> = <value>
